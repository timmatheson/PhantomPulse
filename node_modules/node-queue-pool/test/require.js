/**
 * Created with JetBrains WebStorm.
 * User: kaven276
 * Date: 12-10-18
 * Time: 下午4:54
 */


function loop(start, end, cb){
  for (var i = start; i < end; i++) cb(i);
}

/**
 * see http://localhost:9000 for execution statistics
 */
function testActionQueue(){
  var ActionQueue = require('..').ActionQueue
    , aq = new ActionQueue(10, 1000).usePriorityQueue(3, 1)
    ;
  for (var i = 0; i < 100; i++) {
    (function(j){
      aq.enqueue(undefined, i, function(fin){
        console.log('did some thing for ' + j);
        setTimeout(function(){
          fin();
        }, 2000 * Math.random());
      });
    })(i);
  }
  aq.on('drain', function(){
    console.log(aq.toString());
  });

  var inspect = require('util').inspect;
  require('http').createServer(function(r, p){
    p.writeHead(200, {'Content-Type' : 'text/plain'});
    p.end(inspect(aq.toString()));
  }).listen(9000);
}

function testResourcePool(){
  var slot = 0
    , maxPriorityLevel = 3
    , ResourcePool = require('..').ResourcePool
    , pool = new ResourcePool(5, function(cb){
      // resource will be created sometime later, and asynchronously
      setTimeout(function(){
        var rc = {slot : slot++, date : new Date()};
        cb(rc);
        setTimeout(function(){
          pool.remove(rc);
        }, 1000);
      }, 3000 * Math.random());
    }).usePriorityQueue(maxPriorityLevel);

  loop(0, 20, function(i){
    pool.require(maxPriorityLevel * Math.random(), function(rc, fin){
      setTimeout(function(){
        console.log(rc);
        fin();
      }, 1000 * Math.random());
    });
  });
}

function testPriorityQueue(){
  var pq = new (require('..').PriorityQueue)(3);
  loop(0, 20, function(i){
    pq.push(i, Math.round(Math.random() * 3));
  });
  loop(0, 20, function(i){
    console.log(pq.shift());
  });
}


var async = require('..').async;

function testAsyncForEach(name){
  async[name]([1, 2, 3], function(item, rcb){
    setTimeout(function(){
      console.log(item);
      if (Math.random() < .3) {
        rcb(new Error(item));
        return;
      }
      rcb();
    }, Math.random() * 1000);
  }, function(err){
    console.log('final state is');
    if (err) {
      console.warn(err);
    } else {
      console.log('success!');
    }
  });
}

function testAsyncMap(name){
  async[name]([1, 2, 3], function(item, rcb){
    setTimeout(function(){
      console.log(item);
      if (Math.random() < 0) {
        rcb(new Error(item));
        return;
      }
      rcb(undefined, item * item);
    }, Math.random() * 3000);
  }, function(err, rval){
    console.log('final state is');
    if (err) {
      console.warn(err);
    } else {
      console.log(rval);
    }
  });
}

function testAsyncReduce(name){
  async[name]([1, 2, 3, 4, 5, 6, 7, 8], 0, function(memo, item, rcb){
    setTimeout(function(){
      // console.log(item);
      if (Math.random() < 0.01) {
        rcb(new Error(item));
        return;
      }
      rcb(undefined, memo + item);
    }, Math.random() * 1000);
  }, function(err, rval){
    console.log('final state is');
    if (err) {
      console.warn(err);
    } else {
      console.log(rval);
    }
  });
}

function testAsyncCache(name){
  async[name]([1, 7, 3, 4, 9, 6, 2, 8], function(item, rcb){
    setTimeout(function(){
      // console.log(item);
      if (Math.random() < 0.01) {
        rcb(new Error(item));
        return;
      }
      rcb(undefined, item * item);
    }, Math.random() * 1000);
  }, function(err, rval){
    console.log('final state for ' + name);
    if (err) {
      console.warn(err);
    } else {
      console.log(rval);
    }
  });
}


// testPriorityQueue();
// testActionQueue();
// testResourcePool();

// testAsyncForEach('forEach');
//testAsyncForEach('forEachSeries');
//testAsyncMap('map');

// testAsyncReduce('reduce');
// testAsyncReduce('reduceRight');

// testAsyncCache('cache');
//testAsyncCache('sortBy');
// testAsyncCache('sortBySeries');



function testSeriesParallelLimit(){
  function a(callback){
    setTimeout(function(){
      callback(null, 1);
    }, 200);
  }

  function b(callback){
    setTimeout(function(){
      callback(null, 2);
    }, 100);
  }

  function c(callback){
    setTimeout(function(){
      callback(null, 3);
    }, 50);
  }

  'parallel,series'.split(',').forEach(function(method){
    async[method]([a, b, c ], function(err, results){
      console.log(results);
    });
    async[method]({one : a, two : b, three : c}, function(err, results){
      console.log(results);
    });
  });

  async.limit([a, b , c], 2, function(err, results){
    console.log(results);
  });
  async.limit({one : a, two : b, three : c}, 2, function(err, results){
    console.log(results);
  });
}


//testJudge();
//testAction();
//testSeriesParallelLimit();


{
  var fs = require('fs');
  fs.readdir(__dirname, readFiles);

  function readFiles(err, results){
    if (err) throw err;
    // Create a new group
    async.map(results, function(filename, cb){
      if (/\.js$/.test(filename)) {
        fs.readFile(__dirname + "/" + filename, 'utf8', cb);
      }
    }, showAll);
  }

  function showAll(err, files){
    if (err) throw err;
    console.dir(files);
  }
}


