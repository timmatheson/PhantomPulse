/**
 * Created with JetBrains WebStorm.
 * User: kaven276
 * Date: 12-12-24
 * Time: 下午3:59
 */

var SuperQueue = require('..')
  , sq = new SuperQueue()
  , stater
  , tracer
  ;

sq
  //.addLimiter(new SuperQueue.RateLimiter(1000, 5))
  //.addLimiter(new SuperQueue.RateLimiter(5000, 20))
  //.addLimiter(new SuperQueue.RateLimiterWeighted(3000, 20))
  //.addLimiter(new SuperQueue.ConcurrencyLimiter(3))
  .addLimiter(new SuperQueue.ConcurrencyLimiterWeighted(15))
  .addLimiter(stater = new SuperQueue.Stater())
  // .addLimiter(new SuperQueue.OneByOne(2000))
  .addLimiter(new SuperQueue.Tracer())
  .useQueue(new SuperQueue.PriorityQueue(5))
  //.useCache(new SuperQueue.BasicCache(console.log))
;

stater.on('drain1', function(){
  console.log('on Stater drain');
  console.log(stater.show());
});

sq.on('drain', function(){
  console.log('on SuperQueue drain');
  console.log(stater.show());
});

setInterval(function(){
  console.log('on SuperQueue drain');
  console.log(stater.show());
}, 300000);

sq.on('end', function(){
  console.log('on SuperQueue end with on');
  console.log(stater.show());
});

for (j = 0; j < 3; j++) {
  for (var i = 0; i < 20; i++) {
    (function(i, j){
      var option = {i : i, j : j, cacheKey : i, priority : Math.random() * 5, weight : Math.random() * 10};
      sq.enqueue(option, function(option, cb){
        if (option.cacheResult) {
          // there are cached result already
          // do some thing with option.result
          return;
        }
        // do async call and get result
        setTimeout(function(){
          cb(Math.random() < 0.2 ? new Error('err') : null, option.i);
        }, 2000);
      });
    })(i, j);
  }
}
sq.end(function(){
  console.log('on SuperQueue end inline');
  console.log(stater.show());
});


function dependOn(){
  sq.enqueue({id : 'dbsock'}, function(){
    // connect to db
  });
  sq.enqueue({id : 'dbauthedsock', refs : ['dbsock']}, function(option, actcb){
    // auth to db
    option.dbsock.write('user:pass');
    option.dbsock.on('data', function(data){
      actcb(null, true);
    });
  });
  sq.enqueue({ refs : ['dbauthedsock']}, function(option, actcb){
    option.dbauthedsock.send('...');
    // execute come sql
  });
}