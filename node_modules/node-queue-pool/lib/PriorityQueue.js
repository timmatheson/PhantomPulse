/**
 * Created with JetBrains WebStorm.
 * User: kaven276
 * Date: 12-10-24
 * Time: 上午11:32
 * API
 * var pq = new PriorityQueue(maxLevel) -- 1..maxLevel
 * pq.push(priority,item)
 * pq.shift()
 * pq.length  -- getter only
 */

var undefined;

function PriorityQueue(maxLevel, defaultLevel){
  if (maxLevel <= 1)
    throw new Error('maxLevel must > 1');
  if (parseInt(maxLevel) !== maxLevel)
    throw new Error('maxLevel must be positive integer');
  this.maxLevel = maxLevel;
  this.defaultLevel = defaultLevel || 1;
  this._length = 0;
  var queues = this._queues = new Array(maxLevel);
  for (var i = 0; i < maxLevel; i++) {
    queues[i] = [];
  }
}

PriorityQueue.prototype._adjustPriority = function(priority){
  priority = priority || this.defaultLevel;
  priority = Math.floor(priority) + 1;
  priority = Math.min(priority, this.maxLevel);
  priority = Math.max(priority, 1);
  return priority;
}

PriorityQueue.prototype.push = function(action){
  var priority = this._adjustPriority(action.option.priority);
  this._queues[priority - 1].push(action);
  this._length++;
}

PriorityQueue.prototype.shift = function(){
  if (this._length === 0) {
    return undefined;
  }
  var queues = this._queues;
  for (var i = this.maxLevel; i > 0; i--) {
    var queue = queues[i - 1]
      , item = queue.shift()
      ;
    if (item !== undefined) {
      this._length--;
      return item;
    }
  }
}

PriorityQueue.prototype.unshift = function(action){
  var priority = this._adjustPriority(action.option.priority);
  this._queues[priority - 1].unshift(action);
  this._length++;
}

Object.defineProperty(PriorityQueue.prototype, 'length', {
  get : function(){
    return this._length;
  },
  enumerable : true
});

Object.defineProperty(PriorityQueue.prototype, 0, {
  get : function(){
    var queues = this._queues;
    for (var i = this.maxLevel; i > 0; i--) {
      var queue = queues[i - 1];
      if (queue.length) {
        return queue[0];
      }
    }
    return undefined;
  },
  enumerable : false
});

exports.class = PriorityQueue;