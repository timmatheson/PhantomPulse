function ResourcePool(rcProp){
  this.rcProp = rcProp || 'rc';
  this.freeList = new Array();
}

ResourcePool.prototype.check = function(){
  return !!this.freeList.length;
}

ResourcePool.prototype.count = function(option){
  var slot = this.freeList.shift();
  option[this.rcProp] = slot.rc;
}

ResourcePool.prototype.actcb = function(err, result, option){
  // whatever act fin or err or both,
  // return rc to freelist and avoid repeat
  if (option.rc) {
    this.freeList.unshift(option.rc);
    delete option.rc;
  }
  return true;
}

ResourcePool.prototype.addRC = function(rc){
  this.freeList.push(rc);
  this._resume();
}

ResourcePool.prototype.removeRC = function(rc){
  this.freeList.splice(this.freeList.indexOf(rc), 0);
}

function example(){
  var sq = new (require('..'))
    , rp = new ResourcePool('conn')
    ;
  sq.addLimiter(rp, 'pool');
  // add some connection to rp
  rp.add(new Connection());
  rp.add(new Connection());
  rp.add(new Connection());
  sq.enqueue(null, function(option, actcb){
    // so some sql with option.conn
  });
}

/**
 how to manage rcs in rc pool ?
 1. automatically, active. keep a minimal quantity and below a maximum quantity.
 can listen for rc's detroy event, and
 2. passive (reverse connection), a net server who listen reversed connection,
   when pass, add connection to rc pool,
   when connection is end/break, remove connection from rc pool
 */