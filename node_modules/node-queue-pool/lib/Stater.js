var EventEmitter = require('events').EventEmitter
  , util = require('util')
  ;

util.inherits(Stater, EventEmitter);

function Stater(){
  EventEmitter.call(this);
  this.executeCount = 0;
  this.executedCount = 0;
  this.successCount = 0;
  this.errorCount = 0;

  this.startTime = Date.now();
  this.totolTime = 0;

  // this.timeoutCount = 0;
  // this.lateCount = 0;

  this.hInterval = undefined;
}


Stater.prototype.count = function(option){
  this.executeCount++;
  option.stime = Date.now();
}

Stater.prototype.actcb = function(err, result, option){
  option.stime || console.log(option);
  this.totolTime += (Date.now() - option.stime);
  delete option.stime;
  this.executedCount++;
  if (err) {
    this.errorCount++;
  } else {
    this.successCount++
  }
  if (this.executedCount === this.executeCount) this.emit('drain');
  return true;
}

Stater.prototype.show = function(){
  return {
    execute : this.executeCount,
    pending : this.executeCount - this.executedCount,
    executed : this.executedCount,
    success : this.successCount,
    error : this.errorCount,
    errorRate : Math.round(this.errorCount / this.executedCount * 100) / 100,
    totolTime : this.totolTime + ' ms',
    avgTime : Math.round(this.totolTime / this.executedCount) + ' ms',
    rate : Math.round(this.executedCount / this.totolTime * 1000 * 100) / 100,
    duration : (Date.now() - this.startTime) + ' ms'
  };
}

Stater.prototype.repeatShow = function(interval){
  var me = this;
  setInterval(function(){
    console.log(me.show());
  }, interval);
}

exports.class = Stater;