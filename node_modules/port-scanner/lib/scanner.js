/**
 * Created with JetBrains WebStorm.
 * User: kaven276
 * Date: 12-11-14
 * Time: 下午3:38
 */

var net = require('net')
  , Socket = net.Socket
  , NQP = require('node-queue-pool')
  , SuperQueue = NQP
  ;

function dummy(){
}

function scan(port, host, callback){
  var socket = new Socket()
    , status = null
    ;
  // Socket connection established, port is open
  socket.on('connect', function(){
    status = 'open';
    socket.end();
    socket.destroy();
    callback(null, 'opening', host, port);
    // console.log('open', port, host);
  });

  // If no response, assume port is not listening
  socket.setTimeout(1000);
  socket.on('timeout', function(){
    status = 'timeout';
    socket.destroy();
    callback(null, 'forbid timeout', host, port);
    // console.log('timeout', port, host);
  });

  // Assuming the port is not open if an error. May need to refine based on
  // exception
  socket.on('error', function(ex){
    status = status || 'error';
    if (ex.code === 'ECONNREFUSED') {
      callback(null, 'refuse', host, port);
    } else {
      callback(null, 'forbid error', host, port);
    }
    // console.log('error', port, host, ex.code);
  });

  host = host || 'localhost';
  // Return after the socket has closed
  socket.on('close', function(exception){
    //callback(null, status || 'refuse', host, port);
    //console.log('on close');
    status || console.log('no status on close', port, host);
  });

  socket.connect(port, host);
}

var sq = new SuperQueue()
  , concurrencyLimiter = new NQP.ConcurrencyLimiter(1000)
  ;
sq.addLimiter(concurrencyLimiter);

//var stater = new NQP.Stater();
//stater.repeatShow(2000);
//stater.on('drain', function(){
//  console.warn('all fin');
//});
//sq.addLimiter(stater);

var famousPorts = {
  80 : 'http',
  23 : 'telnet',
  20 : 'ftp',
  21 : 'ftp',
  25 : 'smtp',
  1158 : 'oem',
  8000 : 'http',
  8080 : 'http',
  1521 : 'oracle'
};

function scanLanFamousPorts(){
  for (var ip = 2; ip < 255; ip++) {
    for (var port in famousPorts) {
      // for (var port = 1; port < 1024; port++) {
      (function(ip, port){
        sq.enqueue({}, function(fin){
          scan(port, '60.29.143.' + ip, function(err, status, host, port){
            fin();
            if (status === 'open')
              console.log([host, port].join(':'), famousPorts[port] || '');
          });
        });
      })(ip, port);
    }
  }
}

function scanPorts(ip, checkFirewall, startPort, endPort, option){
  startPort = startPort || 1;
  endPort = endPort || 65535;
  var namedPorts = option.namedPorts || famousPorts
    , logStepCount = option.logStepCount
    , exclude = option.exclude || /^forbid$/
    ;
  for (var port = startPort; port <= endPort; port++) {
    (function(ip, port){
      sq.enqueue({}, function(option, fin){
        scan(port, ip, function(err, status, host, port){
          fin();
          if (logStepCount && port % logStepCount === 0) console.log('port', port);
          var namePort = namedPorts[port] || '';
          if (checkFirewall || namePort || !status.match(exclude)) {
            console.log('%s - %s - ', [host, (port + '    ').substr(0, 5)].join(':'), (status + '   ').substr(0, 15), namePort);
          }
        });
      });
    })(ip, port);
  }
}

module.exports = scanPorts;
